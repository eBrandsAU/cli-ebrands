#!/bin/bash
# shellcheck disable=SC2034

# Bail on any errors
set -e
trap "utils_error_exit \
  'Command did not complete!' \
  'Received signal SIGHUP.'" SIGHUP
trap "utils_error_exit \
  'Command did not complete!' \
  'Received signal SIGINT.'" SIGINT
trap "utils_error_exit \
  'Command did not complete!' \
  'Received signal SIGTERM.'" SIGTERM
trap "utils_error_exit \
  'Command did not complete!' \
  'Scroll up for more details about what went wrong.'" ERR

# Set variables
valid_commands_array=(init login pull push setup start stop)
apps_array=(terminus wp composer brew lando)
colour_error=$(tput setaf 1)
colour_info=$(tput setaf 4)
colour_pass=$(tput setaf 2)
colour_reset=$(tput sgr0)
colour_warn=$(tput setaf 3)
symbol_pass="âœ“"
symbol_info="*"
symbol_warn="!"
symbol_error="x"

command_init() {
  utils_check_auth
  utils_check_dir
  lando init pantheon
}

command_login() {
  terminus auth:login
}

command_pull() {
  utils_check_auth
  lando pull
}

command_push() {
  utils_check_auth
  lando push
}

command_setup() {
  for app in "${apps_array[@]}"; do
    if ! util_command_exists "${app}"; then
      echo
      utils_print_status "info" "Installing ${app}"
      "install_${app}"
    fi
    utils_print_status "pass" "${app}"
  done
}

command_start() {
  lando start
}

command_stop() {
  lando stop
}

install_brew() {
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

install_composer() {
  curl --silent https://raw.githubusercontent.com/composer/getcomposer.org/fe44bd5b10b89fbe7e7fc70e99e5d1a344a683dd/web/installer \
    | php -- \
      --install-dir=/usr/local/bin \
      --filename=composer \
      --version=1.6.5
}

install_lando() {
  brew cask install lando
}

install_terminus() {
  mkdir -p /usr/local/opt/terminus
  curl -O --silent https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar \
    && php installer.phar install \
      --install-dir=/usr/local/opt/terminus \
      --install-version=1.8.1 \
    && rm installer.phar

}

install_wp() {
  curl -O --silent https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
    && chmod +x wp-cli.phar \
    && mv wp-cli.phar /usr/local/bin/wp
}

utils_check_auth() {
  if terminus auth:whoami 2>&1 | grep -q "You are not logged in"; then
    utils_print_status "error" "Please run eb login first!" >&2
    echo
    exit 1
  fi
}

utils_check_dir() {
  if [ "$(ls -A "$PWD")" ]; then
    utils_print_status "error" "Sorry, this directory isn't empty!"
    echo "Please navigate to an empty directory before running eb init."
    echo
    exit 1
  fi
}

utils_print_status() {
  symbol="symbol_$1"
  colour="colour_$1"
  message="$2"
  echo -e "${!colour}${!symbol}${colour_reset:?} ${message}"
}

utils_print_usage() {
  if (( "$#" > 0 )); then
    utils_print_status "error" "Sorry, I didn't understand: $*" >&2
    echo
  fi
  echo "usage: eb <command>"
  echo
  echo "Available commands:"
  # shellcheck disable=SC2154
  for item in "${valid_commands_array[@]}"; do
    echo "    ${item}"
  done
  exit 0
}

utils_error_exit() {
  utils_print_status "error" "$1"
  echo "${@:2}" >&2
  echo
  exit 1
}

util_command_exists() {
  if [ "$(type -P "$1")" ]; then
    return 0
  fi
  return 1
}

main() {
  # Enable pattern lists like @(foo|bar)
  shopt -s extglob
  # This converts the command array into a fun string like the one above
  valid_commands=$(IFS="|"; echo "@(${valid_commands_array[*]})")
  case "$1" in
    ${valid_commands})
      "command_$1"
      ;;
    *)
      utils_print_usage "$@"
      ;;
  esac
}

main "$@"
